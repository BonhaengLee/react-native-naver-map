/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 * <p>
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsJavaDelegate.js
 */


import android.view.View;

import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.uimanager.BaseViewManagerDelegate;
import com.facebook.react.uimanager.BaseViewManagerInterface;

import androidx.annotation.Nullable;

public class RNCNaverMapViewManagerDelegate<T extends View, U extends BaseViewManagerInterface<T> & RNCNaverMapViewManagerInterface<T>> extends BaseViewManagerDelegate<T, U> {
    public RNCNaverMapViewManagerDelegate(U viewManager) {
        super(viewManager);
    }

    @Override
    public void setProperty(T view, String propName, @Nullable Object value) {
        switch (propName) {
            case "mapType":
                mViewManager.setMapType(view, (String) value);
                break;
            case "layerGroups":
                mViewManager.setLayerGroups(view, (ReadableArray) value);
                break;
            case "isIndoorEnabled":
                mViewManager.setIsIndoorEnabled(view, value == null ? false : (boolean) value);
                break;
            case "isNightModeEnabled":
                mViewManager.setIsNightModeEnabled(view, value == null ? false : (boolean) value);
                break;
            case "isLiteModeEnabled":
                mViewManager.setIsLiteModeEnabled(view, value == null ? false : (boolean) value);
                break;
            case "lightness":
                mViewManager.setLightness(view, value == null ? 0f : ((Double) value).doubleValue());
                break;
            case "buildingHeight":
                mViewManager.setBuildingHeight(view, value == null ? 1f : ((Double) value).doubleValue());
                break;
            case "symbolScale":
                mViewManager.setSymbolScale(view, value == null ? 1f : ((Double) value).doubleValue());
                break;
            case "symbolPerspectiveRatio":
                mViewManager.setSymbolPerspectiveRatio(view, value == null ? 1f : ((Double) value).doubleValue());
                break;
            case "center":
                mViewManager.setCenter(view, (ReadableMap) value);
                break;
            case "mapPadding":
                mViewManager.setMapPadding(view, (ReadableMap) value);
                break;
            default:
                super.setProperty(view, propName, value);
        }
    }

    @Override
    public void receiveCommand(T view, String commandName, ReadableArray args) {
        switch (commandName) {
            case "animateToCoordinate":
                mViewManager.animateToCoordinate(view, args.getDouble(0), args.getDouble(1));
                break;
            case "animateToBound":
                mViewManager.animateToBound(view, args.getString(0));
                break;
        }
    }
}
